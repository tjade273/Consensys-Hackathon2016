// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"blockNum","type":"uint256"},{"name":"proposal","type":"uint256"}],"name":"challenge","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"minDeposit","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"blockNum","type":"uint256"},{"name":"proposal","type":"uint256"},{"name":"proofIndex","type":"uint256"}],"name":"acceptChallenge","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"blockNum","type":"uint256"}],"name":"buyNumber","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"randomNumbers","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"fee","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"blockNum","type":"uint256"},{"name":"proposal","type":"uint256"}],"name":"deposit","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"blockNum","type":"uint256"},{"name":"proposal","type":"uint256"}],"name":"declareVictor","outputs":[],"type":"function"}],
    binary: "6060604052601460025561067b806100176000396000f36060604052361561006c5760e060020a60003504632e414890811461006e57806341b3d1851461008c578063431148421461009b5780634b729aff146101885780635257cd901461019b578063ddca3f43146101b3578063e2bbb158146101c1578063f869b11a146101d7575b005b61006c600435602435670de0b6b3a764000034101561039857610002565b6101f9670de0b6b3a764000081565b61006c6004356024356044356000838152600160208181526040808420600160a060020a0333168552928301909152909120548314158061017e575080600101600050600082600201600050600086815260200190815260200160002060005084815481101561000257906000526020600020906009020160005060010160009054906101000a9004600160a060020a0316600160a060020a031681526020019081526020016000206000506001016000505460000381600101600050600033600160a060020a0316815260200190815260200160002060005060010160005054125b1561045457610002565b61006c600435438111156104af57610002565b6101f960043560006020819052908152604090205481565b6101f966038d7ea4c6800081565b61006c600435602435438211156104df57610002565b61006c6004356024356000828152602081905260408120541461063957610002565b6060908152602090f35b50505081548110156100025790600052602060002090600902016000507382ac66d03aa99263717d66e1192de3afa1512a5b6364e7d90b90913360016000506000878152602001908152602001600020600050600301600050548560026000505460146040518760e060020a0281526004018087815260200186600160a060020a0316815260200185815260200184815260200183815260200182815260200196505050505050506000604051808303818660325a03f415610002575050508060016000506000848152602001908152602001600020600050600101600050600033600160a060020a03168152602001908152602001600020600050600001600050819055503460000360016000506000848152602001908152602001600020600050600101600050600033600160a060020a0316815260200190815260200160002060005060010160005081905550346001600050600084815260200190815260200160002060005060000160005060008381526020019081526020016000206000828282505403925050819055505b5050565b6000828152600160208181526040808420858552600201909152909120805491820180825590919082908280158290116102035760090281600902836000526020600020918201910161020391905b8082111561045057805473ffffffffffffffffffffffffffffffffffffffff1990811682556001820180549091169055600060028201819055600382018190556004820181905560058201819055600682018190556007820181905560088201556009016103e7565b5090565b33816002016000506000858152602001908152602001600020600050838154811015610002579060005260206000209060090201600050805473ffffffffffffffffffffffffffffffffffffffff1916909117905550505050565b66038d7ea4c680003410156104c357610002565b60009081526001602052604090206004018054600a3402019055565b6000828152600160208181526040808420600160a060020a03331685529290920190528120541480159061055557508060016000506000848152602001908152602001600020600050600101600050600033600160a060020a031681526020019081526020016000206000506000016000505414155b1561055f57610002565b8060016000506000848152602001908152602001600020600050600101600050600033600160a060020a03168152602001908152602001600020600050600001600050819055503460016000506000848152602001908152602001600020600050600101600050600033600160a060020a03168152602001908152602001600020600050600101600082828250540192505081905550346001600050600084815260200190815260200160002060005060000160005060008381526020019081526020016000206000828282505401925050819055505050565b6001602090815260406000818120600481015485835293522054111561039457806000600050600084815260200190815260200160002060005081905550505056",
    unlinked_binary: "6060604052601460025561067b806100176000396000f36060604052361561006c5760e060020a60003504632e414890811461006e57806341b3d1851461008c578063431148421461009b5780634b729aff146101885780635257cd901461019b578063ddca3f43146101b3578063e2bbb158146101c1578063f869b11a146101d7575b005b61006c600435602435670de0b6b3a764000034101561039857610002565b6101f9670de0b6b3a764000081565b61006c6004356024356044356000838152600160208181526040808420600160a060020a0333168552928301909152909120548314158061017e575080600101600050600082600201600050600086815260200190815260200160002060005084815481101561000257906000526020600020906009020160005060010160009054906101000a9004600160a060020a0316600160a060020a031681526020019081526020016000206000506001016000505460000381600101600050600033600160a060020a0316815260200190815260200160002060005060010160005054125b1561045457610002565b61006c600435438111156104af57610002565b6101f960043560006020819052908152604090205481565b6101f966038d7ea4c6800081565b61006c600435602435438211156104df57610002565b61006c6004356024356000828152602081905260408120541461063957610002565b6060908152602090f35b505050815481101561000257906000526020600020906009020160005073__ProofLib______________________________6364e7d90b90913360016000506000878152602001908152602001600020600050600301600050548560026000505460146040518760e060020a0281526004018087815260200186600160a060020a0316815260200185815260200184815260200183815260200182815260200196505050505050506000604051808303818660325a03f415610002575050508060016000506000848152602001908152602001600020600050600101600050600033600160a060020a03168152602001908152602001600020600050600001600050819055503460000360016000506000848152602001908152602001600020600050600101600050600033600160a060020a0316815260200190815260200160002060005060010160005081905550346001600050600084815260200190815260200160002060005060000160005060008381526020019081526020016000206000828282505403925050819055505b5050565b6000828152600160208181526040808420858552600201909152909120805491820180825590919082908280158290116102035760090281600902836000526020600020918201910161020391905b8082111561045057805473ffffffffffffffffffffffffffffffffffffffff1990811682556001820180549091169055600060028201819055600382018190556004820181905560058201819055600682018190556007820181905560088201556009016103e7565b5090565b33816002016000506000858152602001908152602001600020600050838154811015610002579060005260206000209060090201600050805473ffffffffffffffffffffffffffffffffffffffff1916909117905550505050565b66038d7ea4c680003410156104c357610002565b60009081526001602052604090206004018054600a3402019055565b6000828152600160208181526040808420600160a060020a03331685529290920190528120541480159061055557508060016000506000848152602001908152602001600020600050600101600050600033600160a060020a031681526020019081526020016000206000506000016000505414155b1561055f57610002565b8060016000506000848152602001908152602001600020600050600101600050600033600160a060020a03168152602001908152602001600020600050600001600050819055503460016000506000848152602001908152602001600020600050600101600050600033600160a060020a03168152602001908152602001600020600050600101600082828250540192505081905550346001600050600084815260200190815260200160002060005060000160005060008381526020019081526020016000206000828282505401925050819055505050565b6001602090815260406000818120600481015485835293522054111561039457806000600050600084815260200190815260200160002060005081905550505056",
    address: "0x26975ad73a11a1698faad1060728c2cccd6d45f1",
    generated_with: "2.0.9",
    contract_name: "RNG"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("RNG error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("RNG error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("RNG error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("RNG error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.RNG = Contract;
  }

})();
